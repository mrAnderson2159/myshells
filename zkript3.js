const fs = require('fs')
const { execSync } = require("child_process")
const flag = process.argv[2]
let f1, f2
const n = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57]
const cSp = [42816, 42818, 42819, 42828, 42832, 42834, 42836, 42840, 42846, 42848]
const s = [44, 59, 46, 58, 63, 33, 39, 34, 92, 124, 163, 36,
  37, 38, 47, 40, 41, 61, 94, 43, 64, 35, 45, 95, 60, 62
]
const cN = [8839, 8502, 44084, 8501, 8704, 44085, 44086, 8813, 44087, 44088,
  8719, 44089, 44103, 44090, 44091, 8713, 44092, 44093, 44094, 44095, 8816,
  44096, 8838, 44097, 44098, 10762, 44099, 44100, 44101, 44102
]
const a = [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
  77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88,
  89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
  107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
  119, 120, 121, 122, 224, 232, 233, 236, 242, 249
]
const cSy = [11822, 11910, 11911, 11908, 11909, 11910, 11911, 11912, 11913,
  11915, 11916, 11917, 11918, 11919, 11920, 11921, 11922, 11923, 11924, 11925,
  11926, 11927, 11928, 11929, 11931, 11932, 11933, 11934, 11935, 11936, 11937,
  11938, 11939, 11940, 11941, 11942, 11943, 11944, 11945, 11946, 11947, 11948,
  11949, 11950, 11951, 11952, 11953, 11955, 11957, 11958, 11959, 11960, 11961,
  11962, 11963, 11964, 11965, 11966, 11968, 11969, 11970, 11971, 11972, 11973,
  11974, 11975, 11977, 11978, 11979, 11980, 11981, 11982, 11983, 11984, 11985,
  11986, 11987, 11988, 11989, 11991, 11992, 11993, 11994, 11995, NaN, 11996,
  11997, 11998, 11999, 12000, 12001, 12002, 12003, 12004, 12005, 12006, 12007,
  12008, 12009, 12010, 12011, 12012, 12013, 12014, 12015
]
const cL = [9736, 10158, 10596, 44032, 10152, 44033, 44034, 44035, 8594, 9991,
  8640, 10149, 9733, 10165, 44036, 8649, 9831, 10174, 10159, 9754, 10150, 44037,
  8680, 44038, 9826, 9861, 44039, 8674, 8701, 9817, 9858, 9823, 9813, 9788, 44040,
  9822, 8694, 10146, 9857, 10594, 9812, 9816, 8678, 9815, 9856, 9758, 8656, 9790,
  44041, 10148, 44042, 10172, 10168, 8702, 9859, 10232, 9820, 44043, 10170, 9828,
  10233, 44044, 10163, 44045, 9756, 8641, 44046, 9821, 9735, 9789, 8592, 10147,
  44047, 9860, 44048, 44049, 9825, 8658, 9814, 8672, 9819, 9734, 9755, 9818, 10162,
  10151, 10009, 9880, 8358, 9767, 9841, 163, 10010, 44050, 8377, 10023, 9890, 8468,
  44051, 9764, 8361, 8366, 42916, 44064, 3065, 44065, 3647, 9771, 2546, 44066,
  9793, 9738, 8485, 9773, 9798, 8360, 44067, 8488, 8482, 44068, 9903, 9796, 9791,
  9737, 9873, 9840, 8478, 44069, 44070, 9797, 44071, 9872, 9747, 44072, 174,
  2547, 10022, 9882, 44073, 8480, 44074, 9765, 44075, 165, 8381, 44076, 9906,
  9902, 9741, 44077, 8365, 10016, 10014, 2801, 9863, 9739, 44078, 44079, 169,
  9795, 9772, 8470, 9769, 8372, 44080, 44081, 9768, 44082, 9799, 9901, 162, 9954,
  44083, 8471
]
const fcc = n => String.fromCharCode(n)
const mfc = a => a.map(fcc)
const r = (s, l, it, r, c) => {
  const p = it * r
  let a, m = ''
  for (let i = 0; i < s.length; i++) {
    a = s.slice(i, i + 1)
    if (a === l) {
      a = c[Math.floor(Math.random() * r) + p]
      m = m.concat(a)
    } else
      m = m.concat(a)
  }
  return m
}
const tr = (s, l, it, r, c) => {
  const p = it * r
  let a, b, m = ''
  for (let i = 0; i < s.length; i++) {
    a = s.slice(i, i + 1)
    for (let j = 0; j < r; j++) {
      if (a == c[j + p]) {
        b = true
        break;
      } else
        b = false
    }
    if (b) {
      a = l
      m = m.concat(a)
    } else
      m = m.concat(a)
  }
  return m
}
const e = (t) => {
  for (let i = 0; i < a.length; i++) {
    t = r(t, fcc(a[i]), i, 3, mfc(cL))
    t = r(t, ' ', i, 10, mfc(cSp))
    t = r(t, fcc(s[i]), i, 4, mfc(cSy))
    t = r(t, fcc(n[i]), i, 3, mfc(cN))
  }
  return t
}
const t = (c) => {
  for (let i = 0; i < a.length; i++) {
    c = tr(c, fcc(a[i]), i, 3, mfc(cL))
    c = tr(c, ' ', i, 10, mfc(cSp))
    c = tr(c, fcc(s[i]), i, 4, mfc(cSy))
    c = tr(c, fcc(n[i]), i, 3, mfc(cN))
  }
  return c
}
switch (flag) {
  case '-e':
    f1 = fs.readFileSync(process.argv[3], 'utf8')
    f2 = /\//.test(process.argv[4]) ? process.argv[4] : `${process.cwd()}/${process.argv[4]}`
    fs.appendFileSync(f2, e(f1))
    break;
  case '-t':
    f1 = fs.readFileSync(process.argv[3], 'utf8')
    f2 = /\//.test(process.argv[4]) ? process.argv[4] : `${process.cwd()}/${process.argv[4]}`
    fs.appendFileSync(f2, t(f1))
    break;
  case '--edit':
    execSync(`atom ${__filename}`)
    break;
  default:
    throw 'error: unknown flag'
}
